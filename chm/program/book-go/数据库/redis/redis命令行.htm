<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=GBK" />
<title>redis命令行</title>
<script type="text/javascript" src="../../other/jquery-1.7.2.js"></script>
<script type="text/javascript" src="../../other/css.js"/></script>
<style>
div{
	padding-left:3%;
}
.divfirst{
	width:96%;
	background-color:#FFCC99;
}
.divnext{
	border-style: dotted;
	border-color: #C0C0C0;
	display:none;
	width:94%;
	margin-left:1%;
}

.table{
	
	width:100%;
	margin-left:10px;
	
}
.table tr td{
	text-align:left;
	border:1px solid black;
	padding-left:15px;
}
</style>

</head>

<body>

<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
string命令行 
</div>
<div class="divnext" >
	<ul style=" list-style-type: none;">
	<br/>
	<li>
		二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象;一个键最大能存储512MB<br/>
	</li>
	<br/>
	<li>
		<table class="table" style="font-size:large;width:90%">
			<tr style="background-color:lightgrey">

				<td style="width:40%;">命令</td>
				<td style="width:40%;">含义</td>
				<td style="width:20%;">时间复杂度</td>
			</tr>
			
			<tr>
				<td style="width:30%;">set key value</td>
				<td style="width:30%;">增加一个 键值对</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">get key </td>
				<td style="width:30%;">查询一个键的值</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">del key [key...]</td>
				<td style="width:30%;">删除多个键</td>
				<td style="width:20%;">O(k) k为key的个数</td>
			</tr>
			<tr>
				<td style="width:30%;">mset key value [key value ...]</td>
				<td style="width:30%;">批量设置键值对</td>
				<td style="width:20%;">O(k) k为key的个数</td>
			</tr>
			<tr>
				<td style="width:30%;">mget key [key...]</td>
				<td style="width:30%;">批量获得多个键的值</td>
				<td style="width:20%;">O(k) k为key的个数</td>
			</tr>
			<tr>
				<td style="width:30%;">incr key</td>
				<td style="width:30%;">value自增 </td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">decr key</td>
				<td style="width:30%;">value自减 </td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">incrby key incrmement</td>
				<td style="width:30%;">value自增步长 </td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">decrby key incrmement</td>
				<td style="width:30%;">value自减步长 </td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">incrbyfloat key incrmement</td>
				<td style="width:30%;">value自增浮点步长 </td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">append key value</td>
				<td style="width:30%;">value追加内容</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">strlen key </td>
				<td style="width:30%;">长度</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">setrange key offset value </td>
				<td style="width:30%;">值 在offset开始替换为 新的value（注意中文占3字符）</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">getrange key start end </td>
				<td style="width:30%;">值 在offset开始替换为 新的value（注意中文占3字符）</td>
				<td style="width:20%;">O(n) n为字符串长度，如果长度不是很长 视为O(1)</td>
			</tr>
			
			
			

		</table>
	</li>
	</ul>
</div>

<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
hash命令行 
</div>
<div class="divnext" >
	<ul style=" list-style-type: none;">
	<br/>
	<li>
		是一个键名对集合;一个string类型的field和value的映射表，hash特别适合用于存储对象;每个 hash 可以存储 232 -1 键值对（40多亿）<br/>
	</li>
	<br/>
	<li>
		<table class="table" style="font-size:large;width:90%">
			<tr style="background-color:lightgrey">

				<td style="width:40%;">命令</td>
				<td style="width:40%;">含义</td>
				<td style="width:20%;">时间复杂度</td>
			</tr>
			
			<tr>
				<td style="width:30%;">hset key field value</td>
				<td style="width:30%;">增加一个 hash 键值对</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">hget key field </td>
				<td style="width:30%;">查询 hash 键 的 值</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">hdel key field [field...]</td>
				<td style="width:30%;">删除 hash 多个键(field)</td>
				<td style="width:20%;">O(k) k为field的个数</td>
			</tr>
			<tr>
				<td style="width:30%;">hlen key </td>
				<td style="width:30%;">hash 的 field数量</td>
				<td style="width:20%;">O(1)</td>
			</tr>
			<tr>
				<td style="width:30%;">hgetall key （性能风险）</td>
				<td style="width:30%;">查询 hash的所有 field-value</td>
				<td style="width:20%;">O(n) field的数量</td>
			</tr>
			<tr>
				<td style="width:30%;">hmset field value [field value]</td>
				<td style="width:30%;">hash 批量设置 field 的value</td>
				<td style="width:20%;">O(k) k为field的数量</td>
			</tr>
			<tr>
				<td style="width:30%;">hmget field [field...]</td>
				<td style="width:30%;">hash 批量获得 field 的value</td>
				<td style="width:20%;">O(k) k为field的数量</td>
			</tr>
			<tr>
				<td style="width:30%;">hexists key field</td>
				<td style="width:30%;">hash field 是否存在</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">hkeys key </td>
				<td style="width:30%;">hash 获得所有field</td>
				<td style="width:20%;">O(k) k为field的总数 </td>
			</tr>
			<tr>
				<td style="width:30%;">hvals key </td>
				<td style="width:30%;">hash 获得所有value</td>
				<td style="width:20%;">O(k) k为field的总数</td>
			</tr>
			<tr>
				<td style="width:30%;">hsetnx key field value</td>
				<td style="width:30%;">hash 如果field不存在 新增 </td>
				<td style="width:20%;">O(1)</td>
			</tr>
			<tr>
				<td style="width:30%;">hincrby key field increment</td>
				<td style="width:30%;">hash 增加field的指定步长(int)</td>
				<td style="width:20%;">O(1)</td>
			</tr>
			<tr>
				<td style="width:30%;">hincrbyfloat key field increment</td>
				<td style="width:30%;">hash 增加field的指定步长(float)</td>
				<td style="width:20%;">O(1)</td>
			</tr>
			<tr>
				<td style="width:30%;">hstrlen key field</td>
				<td style="width:30%;">value length</td>
				<td style="width:20%;">O(1)</td>
			</tr>
			
			

		</table>
	</li>
	</ul>
</div>


<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
list命令行 
</div>
<div class="divnext" >
	<ul style=" list-style-type: none;">
	<br/>
	<li>
		列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）<br/>
	</li>
	<br/>
	<li>
		<table class="table" style="font-size:large;width:90%">
			<tr style="background-color:lightgrey">
				<td style="width:20%;">操作类型</td>
				<td style="width:30%;">命令</td>
				<td style="width:30%;">含义</td>
				<td style="width:20%;">时间复杂度</td>
			</tr>
			
			<tr>
				<td rowspan="3" style="width:20%;">添加</td>
				<td style="width:30%;">rpush key value [value...]</td>
				<td style="width:30%;">从右往左push</td>
				<td style="width:20%;">O(k) 元素个数</td>
			</tr>
			<tr>
				<td style="width:30%;">lpush key value [value...]</td>
				<td style="width:30%;">从左往右push</td>
				<td style="width:20%;">O(k) 元素个数</td>
			</tr>
			<tr>
				<td style="width:30%;">linsert key before|after pivot(基准元素) value(添加值)</td>
				<td style="width:30%;">在基准值前后添加元素</td>
				<td style="width:20%;">O(n) n为pivot距离表头或尾的距离</td>
			</tr>
			
			<tr>
				<td rowspan="3" style="width:20%;">查找</td>
				<td style="width:30%;">lrange key start end （性能风险）</td>
				<td style="width:30%;">范围start-end查询list </td>
				<td style="width:20%;">O(s|n) s为start偏移量 n为start-end的范围</td>
			</tr>
			<tr>
				<td style="width:30%;">lindex key index</td>
				<td style="width:30%;">从下标查询</td>
				<td style="width:20%;">O(n) n为索引的偏移量</td>
			</tr>
			<tr>
				<td style="width:30%;">llen</td>
				<td style="width:30%;">list长度</td>
				<td style="width:20%;">O(1)</td>
			</tr>
			
			<tr>
				<td rowspan="4" style="width:20%;">删除</td>
				<td style="width:30%;">lpop</td>
				<td style="width:30%;">从左侧弹出 </td>
				<td style="width:20%;">O(1)</td>
			</tr>
			<tr>
				<td style="width:30%;">rpop</td>
				<td style="width:30%;">从右侧弹出</td>
				<td style="width:20%;">O(1)</td>
			</tr>
			<tr>
				<td style="width:30%;">lrem count value</td>
				<td style="width:30%;">
				*count>0从左往右删除count个 值为value的元素<br/>
				*count<0从左往右删除|count|个 值为value的元素<br/>
				*count=0全删除
				</td>
				<td style="width:20%;">O(n) n为列表长度</td>
			</tr>
			<tr>
				<td style="width:30%;">ltrim key start end</td>
				<td style="width:30%;">裁剪元素</td>
				<td style="width:20%;">O(n) n为裁剪元素的总数</td>
			</tr>
			
			<tr>
				<td rowspan="1" style="width:20%;">修改</td>
				<td style="width:30%;">lset key index value</td>
				<td style="width:30%;">修改某一位置的值 </td>
				<td style="width:20%;">O(n) n为索引的偏移量</td>
			</tr>
			
			<tr>
				<td rowspan="1" style="width:20%;">阻塞</td>
				<td style="width:30%;">blpop brpop</td>
				<td style="width:30%;">阻塞式的弹出元素</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			

		</table>
	</li>
	</ul>
</div>

<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
set 命令行 
</div>
<div class="divnext" >
	<ul style=" list-style-type: none;">
	<br/>
	<li>
		string类型的无序集合；集合是通过哈希表实现的;集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员);<br/>
		添加一个string元素到,key对应的set集合中，成功返回1,如果元素已经在集合中返回0,key对应的set不存在返回错误<br/>
	</li>
	<br/>
	<li>
		<table class="table" style="font-size:large;width:90%">
			<tr style="background-color:lightgrey">

				<td style="width:40%;">命令</td>
				<td style="width:40%;">含义</td>
				<td style="width:20%;">时间复杂度</td>
			</tr>
			
			<tr>
				<td style="width:30%;">sadd key element [element]</td>
				<td style="width:30%;">往set中增加元素</td>
				<td style="width:20%;">O(k) k为元素个数</td>
			</tr>
			<tr>
				<td style="width:30%;">srem key element [element]</td>
				<td style="width:30%;">在set中删除元素</td>
				<td style="width:20%;">O(k) k为元素个数</td>
			</tr>
			<tr>
				<td style="width:30%;">scard key </td>
				<td style="width:30%;">set的元素数量</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">sismembe key element </td>
				<td style="width:30%;">元素是否在set中</td>
				<td style="width:20%;">O(1)</td>
			</tr>
			<tr>
				<td style="width:30%;">srandmember key [count]</td>
				<td style="width:30%;">随机返回count个 (默认1)个元素，原set不删除</td>
				<td style="width:20%;">O(count) </td>
			</tr>
			<tr>
				<td style="width:30%;">spop key [count]</td>
				<td style="width:30%;">随机返回count个 (默认1)个元素，原set删除</td>
				<td style="width:20%;">O(count) </td>
			</tr>
			<tr>
				<td style="width:30%;">smembers key （性能风险）</td>
				<td style="width:30%;">获得所有的元素</td>
				<td style="width:20%;">O(k) k为元素的总数</td>
			</tr>
			<tr>
				<td style="width:30%;">sinter(store) key [key...]</td>
				<td style="width:30%;">多个set交集</td>
				<td style="width:20%;">O(m*k) k为多个集合中元素最少的个数，m是键个数</td>
			</tr>
			<tr>
				<td style="width:30%;">sunion(store) key [key...]</td>
				<td style="width:30%;">多个set并集</td>
				<td style="width:20%;">O(k) k为多个集合元素个数</td>
			</tr>
			<tr>
				<td style="width:30%;">sdiff(store) key [key...]</td>
				<td style="width:30%;">以第一个set为基准，求差集</td>
				<td style="width:20%;">O(k) k为多个集合元素个数</td>
			</tr>
			
			

		</table>
	</li>
	</ul>
</div>

<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
sorted set 命令行 
</div>
<div class="divnext" >
	<ul style=" list-style-type: none;">
	<br/>
	<li>
		zset 和 set 一样也是string类型元素的集合,且不允许重复的成员<br/>
		不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序<br/>
		zset的成员是唯一的,但分数(score)却可以重复<br/>
	</li>
	<br/>
	<li>
		<table class="table" style="font-size:large;width:90%">
			<tr style="background-color:lightgrey">

				<td style="width:40%;">命令</td>
				<td style="width:40%;">含义</td>
				<td style="width:20%;">时间复杂度</td>
			</tr>
			
			<tr>
				<td style="width:30%;">zadd key score member [score member ...]</td>
				<td style="width:30%;">往sorted set中增加元素</td>
				<td style="width:20%;">O(k*log(n)) k为添加元素个数，n为当前有序集合成员个数</td>
			</tr>
			<tr>
				<td style="width:30%;">zcard key </td>
				<td style="width:30%;">成员个数</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">zscore key member</td>
				<td style="width:30%;">成员分值</td>
				<td style="width:20%;">O(1) </td>
			</tr>
			<tr>
				<td style="width:30%;">zrank(zrevrank) key member </td>
				<td style="width:30%;">成员的排名 正序(逆序)</td>
				<td style="width:20%;">O(log(n)) n为当前有序集合成员个数</td>
			</tr>
			<tr>
				<td style="width:30%;">zrem key member [member ...]</td>
				<td style="width:30%;">删除成员</td>
				<td style="width:20%;">O(k*log(n)) k为删除元素个数，n为当前有序集合成员个数</td>
			</tr>
			<tr>
				<td style="width:30%;">zincrby key incrmement member</td>
				<td style="width:30%;">增加成员分值</td>
				<td style="width:20%;">O(log(n)) n为当前有序集合成员个数</td>
			</tr>
			<tr>
				<td style="width:30%;">zrange(zrevrange)(withscores) key start end</td>
				<td style="width:30%;">范围获取元素 正序(逆序)</td>
				<td style="width:20%;">O(log(n)+k) k为获取的成员个数，n为当前有序集合成员个数</td>
			</tr>
			<tr>
				<td style="width:30%;">zrangebyscore(zrevrangebyscore)(withscores) key start end</td>
				<td style="width:30%;">指定分数范围获取元素 正序(逆序)</td>
				<td style="width:20%;">O(log(n)+k) k为获取的成员个数，n为当前有序集合成员个数</td>
			</tr>
			<tr>
				<td style="width:30%;">zcount</td>
				<td style="width:30%;">返回指定分值的成员个数</td>
				<td style="width:20%;">O(log(n)) n为当前有序集合成员个数</td>
			</tr>
			<tr>
				<td style="width:30%;">zremrangebyrank key start end</td>
				<td style="width:30%;">删除指定排名内的升序元素</td>
				<td style="width:20%;">O(log(n)+k) k为删除的成员个数,n为当前有序集合成员个数</td>
			</tr>
			<tr>
				<td style="width:30%;">zremrangeByScore key start end</td>
				<td style="width:30%;">删除指定分值内的升序元素</td>
				<td style="width:20%;">O(log(n)+k) k为删除的成员个数,n为当前有序集合成员个数</td>
			</tr>
			<tr>
				<td style="width:30%;">zremrangeByLex key start end</td>
				<td style="width:30%;">前置条件：所有成员的分值都相同 删除指定升序元素的范围 元素前要加[</td>
				<td style="width:20%;">O(log(n)+k) k为删除的成员个数,n为当前有序集合成员个数</td>
			</tr>
			<tr>
				<td style="width:30%;">zinterstore desination numkeys key [key ...]</td>
				<td style="width:30%;">对于相同元素取交集  并对分值进行sum max min操作;权重 相对于集合</td>
				<td style="width:20%;">O(n*k)+O(m*long(m)) n是成员数最小的有序集合成员个数，k为有序集合的个数，m是结果集合的成员个数</td>
			</tr>
			<tr>
				<td style="width:30%;">zunionstore desination numkeys key [key ...]</td>
				<td style="width:30%;">对于相同元素取交集  并对分值进行sum max min操作;权重 相对于集合</td>
				<td style="width:20%;">O(n)+O(m*long(m)) n是所有成员个数和，m是结果集合的成员个数</td>
			</tr>
			
			

		</table>
	</li>
	</ul>
</div>




<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
test
</div>
<div class="divnext">content
</div>



</body>
</html>

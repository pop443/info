<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=GBK" />
<title>jvm</title>
<script type="text/javascript" src="../../other/jquery-1.7.2.js"></script>
<script type="text/javascript" src="../../other/css.js"/></script>
<style>
.table{
	
	width:100%;
	margin-left:10px;
	
}


.table tr td{
	text-align:left;
	border:1px solid black;
	padding-left:15px;
}

.table2 tr td{
	border:1px solid black;
	text-align:left;
	padding-left:10px;
}


.style1 {
	color: #008000;
}

div{
	padding-left:3%;
}
.divfirst{
	width:96%;
	background-color:#FFCC99;
}
.divnext{
	border-style: dotted;
	border-color: #C0C0C0;
	display:none;
	width:94%;
	margin-left:1%;
}
</style>

</head>

<body>
<h2>JVM篇</h2>

<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
JVM 内存模型(参数 java -XX:+PrintFlagsFinal -version)
</div>
<div class="divnext" >
<ul style=" list-style-type: decimal;">
	<li>
	<h4>运行时数据区域：</h4>
	a.程序计数器：线程不隔离，每个线程一块，指向当前线程正在执行的字节码代码的行号。如果当前线程执行的是native方法，则其值为null。<br/>
	b.本地方法栈：线程不隔离，功能与Java虚拟机栈十分相同。区别在于，本地方法栈为虚拟机使用到的native方法服务<br/>
	c.java虚拟机栈：线程隔离，线程私有，每个线程对应一个Java虚拟机栈，每个Java方法在被调用的时候都会创建一个栈帧，并入栈。一旦完成调用，则出栈。所有的的栈帧都出栈后，线程也就完成了使命（包括局部变量表，操作数栈，动态链接，方法出口信息）<br/>
	d.堆：线程隔离,包括 字符串常量区，静态变量（static修饰变量），常量<br/>
	<img  src="mianshi/jvm_heap.jpg" width="100%"/><br />
	
	<br/>
	</li>
	<li>
	<h4>本地内存：</h4>
	e.元数据区：线程隔离，元数据区取代了1.7版本及以前的永久代。存放虚拟机加载的类信息<br/>
	f.直接内存：线程隔离，使用Native函数库直接分配堆外内存 -XX:MaxDirectMemorySize 设置最大堆外内存，由full GC 回收<br/>
	</li>
</ul>

</div>



<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
JVM 堆
</div>
<div class="divnext" >
<ul style=" list-style-type: decimal;">
	<li>
	<h4>young generation </h4>
	Egen 1个:
	Eden区域是用来存放使用new或者newInstance等方式创建的对象，默认都是存放在Eden区，除非这个对象太大，或者超过了设定的阈值-XX:PretenureSizeThresold,这样的对象会被直接分配到Old区域<br/><br/>
	
	Survivor 2个:
	在不断创建对象的过程中，Eden区会满，这时候会开始做Young G也叫Minor GC，而Young空间的第一次GC就是找出Eden区中，幸存活着的对象，然后将这些对象，放到S0，或S1区中的其中一个。<br/><br/>
	a.第一次Egen满了,放入S0,S0满了,则放入old区，Egen清空 S1本来为空;<br/>
	b.第二次Egen满了,将Egen和S0全部放入S1，如果S1满了，则放入old区，Egen清空，S0清空;<br/>
	c.第三次Egen满了,将Egen和S1全部放入S0，如果S0满了，则放入old区，Egen清空，S1清空;<br/>
	d.循环 b和c<br/>
	<br/><br/>
	</li>
	<li>
	<h4>old generation：</h4>
	那些在历经了Eden区和Survivor区的多次GC后仍然存活下来的对象会存储在这个区里。这个区会由一个特殊的垃圾回收器来负责。年老代中的对象的回收是由老年代的GC（major GC）来进行的<br/><br/>
	</li>
	
	<li>
	<h4>分配：</h4>
	<ul>
			<li>老年代 ： 三分之二的堆空间</li>
			<li>年轻代 ： 三分之一的堆空间
			<ul>
				<li>eden区： 8/10 的年轻代空间</li>
				<li>survivor0 : 1/10 的年轻代空间</li>
				<li>survivor1 : 1/10 的年轻代空间</li>
			</ul>
			</li>
		</ul>
	</li>
	
	
</ul>

</div>



<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
对象存活算法
</div>
<div class="divnext" >
<ul style=" list-style-type: decimal;">
	<li>
	<h4>引用计数算法</h4>
	有引用，则对象计数器值就+1，如果没引用则为0。它很难解决对象之间相互循环引用的问题<br/>
	<br/>
	</li>
	<li>
	<h4>可达性分析算法  --JVM算法</h4>
	此算法的基本思想是通过一系列的称为“GC Roots”的对象作为起始点。从这些节点向下开始搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链向链的时候，则证明此对象是不可用的。
	<br/><br/>
	a.虚拟机栈中引用的对象<br/>
	b.堆中静态属性引用的对象<br/>
	c.堆中常量引用的对象<br/>
	d.本地方法栈中Native方法引用的对象
	<br/><br/>
	</li>

</ul>
</div>

<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
垃圾收集算法
</div>
<div class="divnext" >
<ul style=" list-style-type: decimal;">
	<li>
	<h4>标记-清除算法</h4>
	算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。 
主要不足有两个：<br/>
	a.效率问题，标记和清除两个过程的效率都不高<br/>
	b.空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作<br/>
	<br/>
	</li>
	<li>
	<h4>复制算法</h4>
	为了解决效率问题，一种称为“复制”（Copying）的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为了原来的一半
	<br/><br/>
	新生代的内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的内存会被“浪费”。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保（Handle Promotion）分配担保:如果另外一块Survivor空间没有足够空间存放上一次新生代收集下来的存活对象时，这些对象将直接通过分配担保机制进入老年代
	<br/><br/>
	</li>
	
	<li>
	<h4>标记-整理算法</h4>
	标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。 
复制算法的高校建立在存活对象少，垃圾对象多的前提下。这种情况在年轻代比较容易发生，在老年代更常见的情况是大部分都是存活对象。标记整理算法，是一种老年代的回收算法，从根节点对所有的对象做一次标记，然后降所有存活的对象压缩到内存的另外一端，在清楚界边界外所有的空间。这种方法不产生碎片，又不需要2块相同的内存空间。
	<br/><br/>
	
	</li>
	
		<li>
	<h4>分代收集算法</h4>
	根据对象存活周期的不同将内存分为几块。一般把Java堆分为新生代和老年代，根据各个年代的特点采用最合适的收集算法。在新生代中，每次垃圾收集时有大批对象死去，只有少量存活，可以选用复制算法。而老年代对象存活率高，使用标记清除或者标记整理算法。
	<br/><br/>
	
	</li>
	
		
</ul>
</div>


<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
垃圾收集器
</div>
<div class="divnext" >
<ul style=" list-style-type: decimal;">
<li>
	<h4>7种垃圾收集器关系</h4>
	<img  src="mianshi/GCpic.jpg" width="100%"/><br />
	
	<h5>搭配关系</h5>
	a.Serial/Serial Old ：-XX:+UseSerialGC<br />
	b.Serial/CMS <br />
	c.ParNew/Serial Old ：-XX:+UseParNewGC<br />
	d.ParNew/CMS（Serial Old备用） ：-XX:+UseConcMarkSweepGC<br />
	e.Parallel Scavenge/Serial Old ：-XX:+UseParallelGC<br />
	f.Parallel Scavenge/Parallel Old ：-XX:+UseParallelOldGC<br />
	g.G1 ：-XX:+UseG1GC<br />
	<br/>
	</li>
	<li>
	<h4>Serial收集器（young） 单线程<span style="color:red">复制</span>收集算法</h4>
	
	<ul>
		<li>
		它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束<br/><br/>
		</li>
		<li>
		优势：对于单CPU环境来说，Serial收集器没有线程交互的开销，专心做垃圾收集可以获得最高的单线程收集。Serial收集器对于在Client模式下的虚拟机是一个很好的选择。<br/><br/>
		</li>
		<li>
		参数:-XX:UseSerialGC<br/><br/>
		</li>
	</ul>
	
	<br/>
	</li>
	
	<li>
	<h4>ParNew收集器（young） 多线程<span style="color:red">复制</span>收集算法</h4>
	<ul>
		<li>
		ParNew收集器其实就是Serial收集器的多线程版本
		<br/><br/>
		</li>
		<li>
		优势：ParNew收集器是许多运行在server模式下的虚拟机中首选的新生代收集器，一个重要的原因是，只有ParNew和Serial收集器能和CMS收集器共同工作。无法与JDK1.4中存在的新生代收集器Parallel Scavenge配合工作，所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew和Serial。<br/>
		ParNew收集器在单CPU环境中不比Serial效果好，甚至可能更差，两个CPU也不一定跑的过，但随着CPU数量的增加，性能会逐步增加。默认开启的收集线程数与CPU数量相同。在CPU数量很多的情况下，可以使用-XX:ParallelGCThreads参数来限制线程数。<br/><br/>
		</li>
		<li>
		-XX:+UseConcMarkSweepGC"：指定使用CMS后，会默认使用ParNew作为新生代收集器；<br/>
		-XX:+UseParNewGC"：强制指定使用ParNew；<br/>
		-XX:ParallelGCThreads"：指定垃圾收集的线程数量，ParNew默认开启的收集线程与CPU的数量相同；<br/><br/>
		</li>
	</ul>
	<br/>
	</li>
	
	<li>
	<h4>Parallel Scanvenge收集器（young） 多线程<span style="color:red">复制</span>收集算法</h4>
	<ul>
		
		<li>
		Parallel Scanvenge收集器的目的是达到一个可控制的吞吐量（吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值）。Parallel Scanvenge收集器提供了两个参数用于精确控制吞吐量，分别是最大垃圾收集停顿时间的-XX:MaxGCPauseMillis参数以及直接设置吞吐量的大小的-XX:GCTimeRatio参数。MaxGCPauseMillis参数允许一个大于0的毫秒数，收集器将尽可能保证内存回收花费的时间不超过设定值。GC停顿时间缩短是以牺牲吞吐量和新生代空间来换取的，这也直接导致垃圾收集发生得更频繁。GCTimeRatio参数值应该是一个大于0且小于100的整数，即垃圾收集时间占总时间的比例。相当于吞吐量的倒数。Parallel Scanvenge的-XX:UseAdaptiveSizePolicy是一个开关参数。设置这个参数后，虚拟机会根据当前系统运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量，这种调节方式称为GC自适应的调节策略(GC Ergonomics)<br/><br/>
		</li>
	</ul>
	<br/>
	</li>
	
	<li>
	<h4>Serial Old收集器（old） 单线程<span style="color:red">标记-整理</span>算法</h4>
	<ul>
		<li>
		收集器的意义在于给Client模式下的虚拟机使用。如果在Server模式下，那么它主要有两大用途：一种是在jdk1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途是作为CMS收集器的后预案，在并发收集发生Concurrent Mode Failure时使用
		</li>
		
	</ul>
	<br/>
	</li>
	
	<li>
	<h4>Parallel Old 收集器（old） 多线程<span style="color:red">标记-整理</span>收集算法</h4>
	<ul>
		<li>
		这个收集器在jdk1.6中才开始提供的，直到Parallel Old 收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的应用组合，在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加 Parallel Old收集器
		</li>
		
	</ul>
	<br/>
	</li>
	
	<li>
	<h4>CMS收集器（old） 多线程<span style="color:red">标记-清除</span>收集算法</h4>
	<ul>
		<li>
		一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求<br/><br/>
		</li>
		<li>
		
		步骤：
		<ul>
			<li>
		初始标记（CMS inital mark）：需要“stop the world”，但只标记一下GC Roots能直接关联的对象，速度很快
			</li>
			<li>
		并发标记（CMS concurrent mark）：是GC Roots Tracing的过程，花费时间长
			</li>
			<li>
		重新标记（CMS remark）：*需要“stop the world”，是为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。

			</li>
			<li>
		并发清除（CMS concurrent sweep）：是并发清除无用对象

			</li>
		
		</ul>
		<li>

		
		缺点：
		<ul>
			<li>
		CMS收集器对CPU资源非常敏感。在并发阶段，它虽然不会导致用户线程停顿，但是因为占用了一部分CPU资源而导致应用程序变慢，总吞吐量就会降低。CMS默认启动的回收线程数为(CPU数量+3)/4。当CPU的个数少于2个的时候，CMS对用户程序的影响可能会变得很大。
			</li>
			<li>
		CMS收集器无法处理浮动垃圾（floating garbage），可能会出现concurrent mode failure导致另一次full gc的产生。在CMS的并发清理阶段，由于程序还在运行，垃圾还会不断产生，这一部分垃圾出现在标记过程之后，CMS无法在本次收集中处理掉它们，只好留到下一次GC再处理。这种垃圾称为浮动垃圾。同样由于CMS GC阶段用户线程还需要运行，即还需要预留足够的内存空间供用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被灌满了再进行收集而需要预留一部分空间提供并发收集时的程序运作使用。默认设置下 CMS收集器在老年代使用了68%的空间后就会被激活。这个值可以用-XX:CMSInitiatingOccupancyFraction来设置。要是CMS运行期间预留的内存无法满足程序需要，就会出现concurrent mode failure，这时候就会启用Serial Old收集器作为备用进行老年代的垃圾收集。
			</li>
			<li>
		空间碎片过多（标记-清除算法的弊端），CMS是基于标记-清除算法来实现的回收器，提供-XX:+UseCMSCompactAtFullCollection参数，应用于在FULL GC后再进行一个碎片整理过程。-XX:CMSFullGCsBeforeCompaction,多少次不压缩的full gc后来一次带压缩的。

			</li>
			
		
		</ul>
		</li>

</li>
	</ul>
	<br/>
	</li>
	
	<li>
	<h4>G1收集器（old） 多线程标记–整理收集算法</h4>
	<ul>
		<li>
		特点：
		<ul>
			<li>
		并行与并发：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行
			</li>
			<li>
		分代收集：与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能够独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果
			</li>
			<li>
		空间整合：与CMS的“标记–清理”算法不同，G1从整体来看是基于<span style="color:red">标记–整理</span>算法实现的收集器，从局部（两个Region之间）上来看是基于<span style="color:red">复制</span>算法实现的，但无论如何，这两种算法都意味着G1运行期间不会产生内存空间碎片，收集后能提供规整的可用内存。这个特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前出发下一次GC

			</li>
			<li>
		可预测的停顿：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时java（RTSJ）的垃圾收集器的特性了。

			</li>
		
		</ul>
		</li>
		
		<li>
		步骤：
		<ul>
			<li>
		初始标记（Initial Marking）：标记GC Roots能够直接关联到的对象，并且修改TAMS的值，能在正确可用的Region中创建对象，这阶段需要停顿线程，而且耗时很短
			</li>
			<li>
		并发标记（Concurrent Marking）：从GC Roots开始堆中对象进行可达性分析，找出存活的对象，这个时间耗时比较长，但可与用户程序并行执行
			</li>
			<li>
		最终标记（Final Marking）：为了修正和正在并发标记期间因用户程序继续运行而导致标记产生变动的那一部分没有标记记录，虚拟机将这一段对象变法记录在线程Rememberred Set logs里面，最终标记阶段需要把Remembered Set logs 的数据合并到Remembered Set中，这阶段需要停顿线程，但是可并发执行。

			</li>
			<li>
		筛选回收（Live Data Counting and Evacuation）：对各个Region的回收截止和成本进行排序，根据用户期望的GC停顿时间来制定回收计划，这阶段可以做到和用户程序一起并发执行，但是因为值回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅度提高手机效率

			</li>
		
		</ul>
		</li>
		
	</ul>
	<br/>
	</li>
	
		
</ul>
</div>


<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
jvm参数 https://yq.aliyun.com/articles/368436
</div>
<div class="divnext">
<ul>
	<li>
		<h4>JVM工作原理</h4>
		<ul>
			<li>
		
			启动JVM，执行java.exe，读配置JVM.cfg文件，确定JVM.dll文件位置<br/>
		</li>
		<li>
			JVM LoadLibrary 装载JVM.dll文件，<br/>
		</li>
		<li>
			初始化JVM获得本地调用接口,使用JNI技术（Java Native Interface），获得JNIEnv结构的实例;<br/>
		</li>
		<li>
			运行Java程序<br/>
			一种运行jar包，一种运行class文件<br/>
		</li>
		</ul>
	</li>
	<li>
		<h4>运行jar</h4>
		<ul>
			<li>
				jar包中META-INF/MANIFEST.MF文件记录jar包的元数据信息，运行主程序Main-Class，classpath（空格分隔）<br/><br/>	
			</li>
			<li>
				java -jar jar包 [args] 用于运行有Main-Class的jar包，<br/>
				Java.exe通过JNIEnv获得Main-Class的值，之后main函数会调用Java.c中LoadClass方法装载该主类<br/><br/>
			</li>
		</ul>
		<h4>运行classes</h4>
		<ul>
			
			<li>
				java [package] classes 装载该主类<br/><br/>

			</li>
		</ul>
	</li>
	<li>
	<h4>参数</h4>
	<table class="table" style="font-size:large;width:90%">
			<tr>
				
				<td colspan=2 style="width:100%;background-color:lightgrey;"><textarea rows=4 style="width:98%">java -server -Djstorm.home=/usr/lib/jstorm -Dstorm.options= -Djava.library.path=/usr/local/lib:/opt/local/lib:/usr/lib -Xms4g -Xmx4g -Xmn1536m -XX:PermSize=256m -XX:SurvivorRatio=4 -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:CMSFullGCsBeforeCompaction=5 -XX:+HeapDumpOnOutOfMemoryError -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=100M -XX:+UseCMSCompactAtFullCollection -XX:CMSMaxAbortablePrecleanTime=5000 -Xloggc:/var/log/jstorm/nimbus-gc-1493284066.log -Dlogfile.name=nimbus.log -Dlogback.configurationFile=/usr/lib/jstorm/conf/jstorm.logback.xml -Djstorm.log.dir=/var/log/jstorm -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -cp /usr/lib/jstorm/conf:/usr/lib/jstorm/lib/ext//*::/usr/lib/jstorm/jstorm-core-2.2.1.jar:/usr/lib/jstorm/lib/clojure-1.6.0.jar:/usr/lib/jstorm/lib/netty-3.9.0.Final.jar:/usr/lib/jstorm/lib/rocksdbjni-4.3.1.jar:/usr/lib/jstorm/lib/logback-core-1.0.13.jar:/usr/lib/jstorm/lib/servlet-api-2.5.jar:/usr/lib/jstorm/lib/slf4j-api-1.7.5.jar:/usr/lib/jstorm/lib/log4j-over-slf4j-1.6.6.jar:/usr/lib/jstorm/lib/commons-logging-1.1.3.jar:/usr/lib/jstorm/lib/logback-classic-1.0.13.jar:/usr/lib/jstorm/lib/ambari-metrics-jstorm-sink.jar  com.alibaba.jstorm.daemon.nimbus.NimbusServer</textarea></td>
			</tr>
			<tr>
				<td style="width:30%;background-color:lightgrey;">-server</td>
				<td style="width:65%;background-color:lightgrey;">选择 server VM</td>
			</tr>
			<tr>
				<td style="width:30%;background-color:lightgrey;">环境变量</td>
				<td style="width:65%;background-color:lightgrey;">
				export JAVA_OPTS=%JAVA_OPTS% -Xms128m -Xmx512m<br/>
		java -jar xx.jar %JAVA_OPTS%
				</td>
			</tr>
			
			<tr>
				<td style="width:30%;background-color:lightgrey;">-cp/-classpath</td>
				<td style="width:65%;background-color:lightgrey;">添加运行时的jar包</td>
			</tr>
			<tr>
				<td style="width:30%;background-color:lightgrey;">-D&lt;name&gt;=&lt;value&gt;</td>
				<td style="width:65%;background-color:lightgrey;">设置系统属性</td>
			</tr>
			<tr>
				<td style="width:30%;">JMX</td>
				<td style="width:65%;">
				-Dcom.sun.management.jmxremote <br/>
				-Dcom.sun.management.jmxremote.authenticate=false <br/>
				-Dcom.sun.management.jmxremote.ssl=false <br/>
				-Dcom.sun.management.jmxremote.port=9091<br/></td>
			</tr>
			
			<tr>
				<td style="width:30%;background-color:lightgrey;">-agentlib:&lt;libname&gt;[=&lt;options&gt;]</td>
				<td style="width:65%;background-color:lightgrey;">设置本地客户端lib</td>
			</tr>
			<tr>
				<td style="width:30%;">远程调试（intellj）</td>
				<td style="width:65%;">
				-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005<br/></td>
			</tr>
			<tr>
				<td style="width:30%;background-color:lightgrey;">heap堆大小 栈大小 相关</td>
				<td style="width:65%;background-color:lightgrey;">
				<br/>
					<ul>
						<li>
						默认空余堆内存小于<span style="color:red">40%</span>时，JVM就会增大堆直到-Xmx的最大限制，可以由-XX:MinHeapFreeRatio=指定。  <br/>
						默认空余堆内存大于<span style="color:red">70%</span>时，JVM会减少堆直到-Xms的最小限制，可以由-XX:MaxHeapFreeRatio=指定<br/>
						</li>
						<li>
						
						-Xms1024m  初始化堆内存大小
						</li>
						<li>
						-Xmx1024m  堆内存最大
						</li>
						<li>
						-Xmn256m  初始最大的年轻代堆大小
						</li>
						<li>
						-Xss1m  线程桟大小，64位 1M左右
						</li>
						
					</ul>
				
				</td>
			</tr>
			<tr>
				<td style="width:30%">日志</td>
				<td style="width:65%;">
				<br/>
					<ul>
						<li>
						
						-Xloggc:$path/gc.log-`date +%Y%m%d%H%M` ：linux路径<br/>
						-Xloggc:e:/gc.log ：windows路径
						</li>
						<li>
						-verbose:gc:记录 GC 运行以及运行时间
						</li>
						<li>
						-XX:+PrintGCDetails（推荐）:记录 GC 运行时的详细数据信息，包括新生成对象的占用内存大小以及耗费时间等
						</li>
						<li>
						-XX:-PrintGCDateStamps（推荐）:打印垃圾收集的详细时间
						</li>
						<li>
						-XX:-PrintGCTimeStamps:打印垃圾收集的时间戳
						</li>
					</ul>
				
				</td>
			</tr>
			<tr>
				<td style="width:30%;background-color:lightgrey;">heap dump</td>
				<td style="width:65%;background-color:lightgrey;">
				<br/>
					<ul>
						<li>
		自动方式 :<br/>
		-XX:+HeapDumpOnOutOfMemoryError  -XX:HeapDumpPath=${目录}<br/>
		当应用抛出OutOfMemoryError时自动在${目录}下生成dump文件
		<br/><br/>
	</li>
	<li>
		手动方式 :<br/>
		jmap -dump:format=b,file=a.hprof  &lt;pid&gt;<br/>

		file：保存路径及文件名<br/>
		pid：进程编号
		<br/><br/>
	</li>
						
					</ul>
				
				</td>
			</tr>
			
			
			
		</table>
	</li>
</ul>

</div>

<h4></h4>
<div class="divfirst"  onclick="javascript:hoverhidden(this)">
test
</div>
<div class="divnext">content
</div>



</body>
</html>
